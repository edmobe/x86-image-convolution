Microsoft (R) Macro Assembler Version 14.25.28614.0	    05/25/20 01:27:03
CreateFile.asm						     Page 1 - 1


				; Proyecto individual 1
				; Eduardo Moya

				INCLUDE Irvine32.inc  
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				; ----------------------------- Constants --------------------------------				
 = 00000F3C			imageMaxWidth = 3900
 = 00000898			imageMaxHeight	= 2200
 = 0082EBA0			imageMaxResolution	= imageMaxWidth * imageMaxHeight					; width x height
 = 0105F9A0			extendedImageMaxSize = (imageMaxWidth + 2) * (imageMaxHeight * 2)	; (width + 2) x (height + 2)
 = 0105F9A1			BUFFER_SIZE_IN	= extendedImageMaxSize + 1
 = 0000000A			BUFFER_CONSOLE = 10

 00000000			.data
				; User console input (image size)
 00000000  0000000A [		bufferConsole				BYTE BUFFER_CONSOLE DUP(?), 0, 0
	    00
	   ] 00 00
 0000000C 00000000		stdInHandle					HANDLE ?
 00000010 00000000		bytesRead					DWORD ?
 00000014 49 6E 73 65 72	askForDimensions			BYTE "Insert image dimensions using the structure <width>x<height> (example: 640x480): ",0
	   74 20 69 6D 61
	   67 65 20 64 69
	   6D 65 6E 73 69
	   6F 6E 73 20 75
	   73 69 6E 67 20
	   74 68 65 20 73
	   74 72 75 63 74
	   75 72 65 20 3C
	   77 69 64 74 68
	   3E 78 3C 68 65
	   69 67 68 74 3E
	   20 28 65 78 61
	   6D 70 6C 65 3A
	   20 36 34 30 78
	   34 38 30 29 3A
	   20 00

				; File read
 00000066  0105F9A1 [		imageArray		BYTE BUFFER_SIZE_IN DUP(0)
	    00
	   ]
 0105FA07 69 6E 70 75 74	fileNameIn		BYTE "input.txt",0
	   2E 74 78 74 00
 0105FA11 00000000		fileHandleIn	HANDLE ?

				; Convolution
 0105FA15 0000			imageWidth				WORD ?
 0105FA17 0000			imageWidthExtended		WORD ?
 0105FA19 0000			imageHeight				WORD ?
 0105FA1B 0000			imageHeightExtended		WORD ?
 0105FA1D 00000000		imageResolution			DWORD ?
 0105FA21 00000000		extendedImageSize		DWORD ?
 0105FA25 00000000		pixelsIn				DWORD ? 
 0105FA29  00000009 [		sharpeningKernel		BYTE 9 DUP(0)
	    00
	   ]
 0105FA32 0000			sum						WORD 0
 0105FA34 0000			imageRowCounter			WORD 0
 0105FA36 0000			imageColumnCounter		WORD 0
 0105FA38 00			kernelRowCounter		BYTE 0
 0105FA39 00			kernelColumnCounter		BYTE 0
 0105FA3A 00			kernelCounter			BYTE 0
 0105FA3B 00000000		kernelRowOffset			DWORD 0
 0105FA3F 00000000		kernelColumnOffset		DWORD 0
 0105FA43 00000000		imageRowOffset			DWORD 0
 0105FA47 00000000		imageColumnOffset		DWORD 0
 0105FA4B 00000000		sharpenedImageCounter	DWORD 0
 0105FA4F 00			newImage				BYTE 0
 0105FA50  0082EBA0 [		sharpenedImage			BYTE imageMaxResolution DUP(0)
	    00
	   ]

				; File Write
 0188E5F0 6E 6F 72 6D 53	fileNameOut		BYTE "normSharpened.txt", 0
	   68 61 72 70 65
	   6E 65 64 2E 74
	   78 74 00
 0188E602 00000000		fileHandleOut	HANDLE ?
 0188E606 00000000		bytesWrittenOut DWORD ?
 0188E60A 43 61 6E 6E 6F	str1Out			BYTE "Cannot create file",0dh,0ah,0	
	   74 20 63 72 65
	   61 74 65 20 66
	   69 6C 65 0D 0A
	   00
 0188E61F 42 79 74 65 73	str2Out			BYTE "Bytes written to file: ",0
	   20 77 72 69 74
	   74 65 6E 20 74
	   6F 20 66 69 6C
	   65 3A 20 00

 00000000			.code
 00000000			main PROC
				; -------------- GET IMAGE DIMENSIONS FROM CONSOLE ------
				; Ask for the input
 00000000  BA 00000014 R	mov	edx,OFFSET askForDimensions			
 00000005  E8 00000000 E	call	WriteString

				; Get handle to standard input
				INVOKE GetStdHandle, STD_INPUT_HANDLE
 0000000A  6A F6	   *	    push    -00000000Ah
 0000000C  E8 00000000 E   *	    call   GetStdHandle
 00000011  A3 0000000C R	mov stdInHandle,eax

				; Wait for user input
				INVOKE ReadConsole, stdInHandle, ADDR bufferConsole,
					BUFFER_CONSOLE, ADDR bytesRead, 0
 00000016  6A 00	   *	    push   +000000000h
 00000018  68 00000010 R   *	    push   OFFSET bytesRead
 0000001D  6A 0A	   *	    push   +00000000Ah
 0000001F  68 00000000 R   *	    push   OFFSET bufferConsole
 00000024  FF 35 0000000C R *	    push   stdInHandle
 0000002A  E8 00000000 E   *	    call   ReadConsoleA

				; Transform the dimensions
 0000002F  33 F6		xor esi, esi					; Position in value counter = 0
 00000031  33 FF		xor edi, edi					; Buffer counter = 0
 00000033  33 C0		xor eax, eax					; Dimension container
 00000035  33 DB		xor ebx, ebx					; Char value container
 00000037  66| B9 000A		mov cx, 10						; Multiplier

 0000003B			getImageWidth:
 0000003B  8A 9F 00000000 R	mov bl, bufferConsole[edi]		; Get actual value in buffer
 00000041  80 FB 78		cmp bl, 120
 00000044  74 12		je endWidth
 00000046  80 EB 30		sub bl, 48						; Get number
 00000049  83 FE 00		cmp esi, 0
 0000004C  74 03		je updateWidthValue
 0000004E  66| F7 E1		mul cx
 00000051			updateWidthValue:
 00000051  66| 03 C3		add ax, bx
 00000054  47			inc edi
 00000055  46			inc esi
 00000056  EB E3		jmp getImageWidth
 00000058			endWidth:
 00000058  66| A3		mov imageWidth, ax
	   0105FA15 R
 0000005E  33 C0		xor eax, eax
 00000060  33 F6		xor esi, esi
 00000062  47			inc edi

 00000063			getImageHeight:
 00000063  8A 9F 00000000 R	mov bl, bufferConsole[edi]		; Get actual value in buffer
 00000069  80 FB 0D		cmp bl, 13
 0000006C  74 12		je endHeight
 0000006E  80 EB 30		sub bl, 48						; Get number
 00000071  83 FE 00		cmp esi, 0
 00000074  74 03		je updateHeightValue
 00000076  66| F7 E1		mul cx
 00000079			updateHeightValue:
 00000079  66| 03 C3		add ax, bx
 0000007C  47			inc edi
 0000007D  46			inc esi
 0000007E  EB E3		jmp getImageHeight
 00000080			endHeight:
				; Get amount of pixels
 00000080  66| A3		mov imageHeight, ax
	   0105FA19 R
 00000086  66| 8B 1D		mov bx, imageWidth
	   0105FA15 R
 0000008D  66| F7 E3		mul bx
 00000090  66| 8B CA		mov cx, dx
 00000093  C1 E1 10		shl ecx, 16
 00000096  66| 03 C8		add cx, ax
 00000099  89 0D 0105FA1D R	mov imageResolution, ecx
				; Get amount of pixels (extended)
 0000009F  66| A1		mov ax, imageHeight
	   0105FA19 R
 000000A5  66| 8B 1D		mov bx, imageWidth
	   0105FA15 R
 000000AC  66| 83 C0 02		add ax, 2
 000000B0  66| 83 C3 02		add bx, 2
 000000B4  66| A3		mov imageHeightExtended, ax
	   0105FA1B R
 000000BA  66| 89 1D		mov imageWidthExtended, bx
	   0105FA17 R
 000000C1  66| F7 E3		mul bx
 000000C4  66| 8B CA		mov cx, dx
 000000C7  C1 E1 10		shl ecx, 16
 000000CA  66| 03 C8		add cx, ax
 000000CD  89 0D 0105FA21 R	mov extendedImageSize, ecx

				; -------------------- READ FILE ------------------------
				; Let user input a filename.
 000000D3  BA 0105FA07 R		mov edx,OFFSET fileNameIn
 000000D8  B9 0000000A			mov ecx,SIZEOF fileNameIn

				; Open the file for input.
 000000DD  BA 0105FA07 R		mov edx,OFFSET fileNameIn
 000000E2  E8 00000000 E		call OpenInputFile
 000000E7  A3 0105FA11 R		mov fileHandleIn,eax

				; Check for errors.
 000000EC  83 F8 FF			cmp eax,INVALID_HANDLE_VALUE ; error opening file?
 000000EF  75 11			jne file_ok_in ; no: skip
					mWrite <"Cannot open file",0dh,0ah>
 0188E637		     1		.data		
 0188E637 43 61 6E 6E 6F     1		??0000 BYTE "Cannot open file",0dh,0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 000000F1		     1		.code
 000000F1  52		     1		push	edx
 000000F2  BA 0188E637 R     1		mov	edx,OFFSET ??0000
 000000F7  E8 00000000 E     1		call	WriteString
 000000FC  5A		     1		pop	edx
 000000FD  E9 0000036A			jmp quit ; and quit
					
 00000102			file_ok_in:
				; Read the file into a buffer.
 00000102  BA 00000066 R		mov edx,OFFSET imageArray
 00000107  B9 0105F9A1			mov ecx,BUFFER_SIZE_IN
 0000010C  E8 00000000 E		call ReadFromFile
 00000111  73 13			jnc check_buffer_size ; error reading?
					mWrite "Error reading file. " ; yes: show error message
 0188E64A		     1		.data		
 0188E64A 45 72 72 6F 72     1		??0001 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 00000113		     1		.code
 00000113  52		     1		push	edx
 00000114  BA 0188E64A R     1		mov	edx,OFFSET ??0001
 00000119  E8 00000000 E     1		call	WriteString
 0000011E  5A		     1		pop	edx
 0000011F  E8 00000000 E		call WriteWindowsMsg
 00000124  EB 50			jmp close_file

 00000126			check_buffer_size:
 00000126  3D 0105F9A1			cmp eax,BUFFER_SIZE_IN; buffer large enough?
 0000012B  72 11			jb buf_size_ok ; yes
					mWrite <"Error: Buffer too small for the file",0dh,0ah>
 0188E65F		     1		.data		
 0188E65F 45 72 72 6F 72     1		??0002 BYTE "Error: Buffer too small for the file",0dh,0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 0000012D		     1		.code
 0000012D  52		     1		push	edx
 0000012E  BA 0188E65F R     1		mov	edx,OFFSET ??0002
 00000133  E8 00000000 E     1		call	WriteString
 00000138  5A		     1		pop	edx
 00000139  E9 0000032E			jmp quit

 0000013E			buf_size_ok:
 0000013E  C6 80 00000066 R		mov imageArray[eax],0 ; insert null terminator
	   00
					mWrite "File size: "
 0188E686		     1		.data		
 0188E686 46 69 6C 65 20     1		??0003 BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 00000145		     1		.code
 00000145  52		     1		push	edx
 00000146  BA 0188E686 R     1		mov	edx,OFFSET ??0003
 0000014B  E8 00000000 E     1		call	WriteString
 00000150  5A		     1		pop	edx
 00000151  E8 00000000 E		call WriteDec ; display file size
 00000156  E8 00000000 E		call Crlf

				; Display the buffer.
					mWrite <"Buffer:",0dh,0ah,0dh,0ah>
 0188E692		     1		.data		
 0188E692 42 75 66 66 65     1		??0004 BYTE "Buffer:",0dh,0ah,0dh,0ah,0	
	   72 3A 0D 0A 0D
	   0A 00
 0000015B		     1		.code
 0000015B  52		     1		push	edx
 0000015C  BA 0188E692 R     1		mov	edx,OFFSET ??0004
 00000161  E8 00000000 E     1		call	WriteString
 00000166  5A		     1		pop	edx
 00000167  BA 00000066 R		mov edx,OFFSET imageArray ; display the buffer
 0000016C  E8 00000000 E		call WriteString
 00000171  E8 00000000 E		call Crlf

 00000176			close_file:
 00000176  A1 0105FA11 R		mov eax,fileHandleIn
 0000017B  E8 00000000 E		call CloseFile

				; ------------------- TRANSFORM BUFFER TO INT ARRAY --------
				; cl: register to hold the char and transform it to integer
				; al: register that holds multiplication results
				; dl: n as in 10^n
				; bl: actual number
 00000180  FC			cld
 00000181  66| A1		mov ax, imageWidthExtended
	   0105FA17 R
 00000187  66| 8B 1D		mov bx, imageHeightExtended
	   0105FA1B R
 0000018E  66| F7 E3		mul bx
 00000191  66| 8B DA		mov bx, dx
 00000194  C1 E3 10		shl ebx, 16
 00000197  66| 8B D8		mov bx, ax
 0000019A  89 1D 0105FA25 R	mov pixelsIn, ebx					; pixelIn = (width+2)x(height+2)
 000001A0  33 F6		xor esi, esi						; esi: counter
 000001A2  33 FF		xor edi, edi						; edi: pixel counter
 000001A4  33 C0		xor eax, eax							
 000001A6  33 DB		xor ebx, ebx							
 000001A8  33 C9		xor ecx, ecx							
 000001AA  33 D2		xor edx, edx							

				; ----------------------- CONVOLUTION -------------------------
 000001AC			convolution:
 000001AC  C6 05 0105FA29 R		mov sharpeningKernel[0], 0
	   00
 000001B3  C6 05 0105FA2A R		mov sharpeningKernel[1], -1
	   FF
 000001BA  C6 05 0105FA2B R		mov sharpeningKernel[2], 0
	   00
 000001C1  C6 05 0105FA2C R		mov sharpeningKernel[3], -1
	   FF
 000001C8  C6 05 0105FA2D R		mov sharpeningKernel[4], 5
	   05
 000001CF  C6 05 0105FA2E R		mov sharpeningKernel[5], -1
	   FF
 000001D6  C6 05 0105FA2F R		mov sharpeningKernel[6], 0
	   00
 000001DD  C6 05 0105FA30 R		mov sharpeningKernel[7], -1
	   FF
 000001E4  C6 05 0105FA31 R		mov sharpeningKernel[8], 0
	   00
					
 000001EB			new_kernel_row:
 000001EB  8B 1D 0105FA3B R		mov ebx, kernelRowOffset
 000001F1  03 1D 0105FA3F R		add ebx, kernelColumnOffset
 000001F7  03 1D 0105FA43 R		add ebx, imageRowOffset
 000001FD  03 1D 0105FA47 R		add ebx, imageColumnOffset
 00000203  8A 8B 00000066 R		mov cl, [imageArray + ebx]
 00000209  33 D2			xor edx, edx
 0000020B  8A 15 0105FA3A R		mov dl, kernelCounter
 00000211  8A 82 0105FA29 R		mov al, [sharpeningKernel + edx]
 00000217  66| 98			cbw 
 00000219  66| F7 E9			imul cx
 0000021C  66| 01 05			add sum, ax
	   0105FA32 R
 00000223  FE 05 0105FA3A R		inc kernelCounter
 00000229  FE 05 0105FA38 R		inc kernelRowCounter
 0000022F  80 3D 0105FA38 R		cmp kernelRowCounter, 3
	   03
 00000236  74 08			je new_kernel_column
 00000238  FF 05 0105FA3B R		inc kernelRowOffset
 0000023E  EB AB			jmp new_kernel_row

 00000240			new_kernel_column:
 00000240  FE 05 0105FA39 R		inc kernelColumnCounter
 00000246  80 3D 0105FA39 R		cmp kernelColumnCounter, 3
	   03
 0000024D  74 24			je new_image_row
 0000024F  C7 05 0105FA3B R		mov kernelRowOffset, 0
	   00000000
 00000259  C6 05 0105FA38 R		mov kernelRowCounter, 0
	   00
 00000260  33 C0			xor eax, eax
 00000262  66| A1			mov ax, imageWidthExtended
	   0105FA17 R
 00000268  01 05 0105FA3F R		add kernelColumnOffset, eax
 0000026E  E9 FFFFFF78			jmp new_kernel_row

 00000273			new_image_row:
 00000273  66| A1			mov ax, sum
	   0105FA32 R
 00000279  8B 1D 0105FA4B R		mov ebx, sharpenedImageCounter
 0000027F  66| 83 F8 00			cmp ax, 0
 00000283  7C 0E			jl less_than_zero
 00000285  66| 3D 00FF			cmp ax, 255
 00000289  7F 11			jg over_255
 0000028B  88 83 0105FA50 R		mov sharpenedImage[ebx], al
 00000291  EB 10			jmp sum_stored
 00000293			less_than_zero:
 00000293  C6 83 0105FA50 R		mov sharpenedImage[ebx], 0
	   00
 0000029A  EB 07			jmp sum_stored
 0000029C			over_255:
 0000029C  C6 83 0105FA50 R		mov sharpenedImage[ebx], 255
	   FF
 000002A3			sum_stored:
 000002A3  33 C0			xor eax, eax
 000002A5  33 DB			xor ebx, ebx
 000002A7  33 C9			xor ecx, ecx
 000002A9  33 D2			xor edx, edx
 000002AB  C7 05 0105FA3B R		mov kernelRowOffset, 0
	   00000000
 000002B5  C7 05 0105FA3F R		mov kernelColumnOffset, 0
	   00000000
 000002BF  C6 05 0105FA38 R		mov kernelRowCounter, 0
	   00
 000002C6  C6 05 0105FA39 R		mov kernelColumnCounter, 0
	   00
 000002CD  C6 05 0105FA3A R		mov kernelCounter, 0
	   00
 000002D4  66| C7 05			mov sum, 0
	   0105FA32 R
	   0000
 000002DD  FF 05 0105FA43 R		inc imageRowOffset
 000002E3  FF 05 0105FA4B R		inc sharpenedImageCounter
 000002E9  66| A1			mov ax, imageWidth
	   0105FA15 R
 000002EF  66| FF 05			inc imageRowCounter
	   0105FA34 R
 000002F6  66| 39 05			cmp imageRowCounter, ax
	   0105FA34 R
 000002FD  0F 85 FFFFFEE8		jne new_kernel_row

 00000303			new_image_column:
 00000303  66| FF 05			inc imageColumnCounter
	   0105FA36 R
 0000030A  66| A1			mov ax, imageHeight
	   0105FA19 R
 00000310  66| 39 05			cmp imageColumnCounter, ax
	   0105FA36 R
 00000317  74 26			je sharpened
 00000319  66| C7 05			mov imageRowCounter, 0
	   0105FA34 R
	   0000
 00000322  C7 05 0105FA43 R		mov imageRowOffset, 0
	   00000000
 0000032C  33 C0			xor eax, eax
 0000032E  66| A1			mov ax, imageWidthExtended
	   0105FA17 R
 00000334  01 05 0105FA47 R		add imageColumnOffset, eax
 0000033A  E9 FFFFFEAC			jmp new_kernel_row
					
 0000033F			sharpened:
				; ----------------------- WRITE FILE ------------------------
				; Create a new text file.
 0000033F  BA 0188E5F0 R		mov	edx, OFFSET fileNameOut
 00000344  E8 00000000 E		call	CreateOutputFile
 00000349  A3 0188E602 R		mov	fileHandleOut,eax

				; Check for errors.
 0000034E  83 F8 FF			cmp	eax, INVALID_HANDLE_VALUE	; error found?
 00000351  75 0F			jne	file_out_ok					; no: skip
 00000353  BA 0188E60A R		mov	edx,OFFSET str1Out			; display error
 00000358  E8 00000000 E		call	WriteString
 0000035D  E9 0000010A			jmp	quit
 00000362			file_out_ok:
				; Write the buffer to the output file.
 00000362  A1 0188E602 R		mov	eax,fileHandleOut
 00000367  BA 0105FA50 R		mov	edx,OFFSET sharpenedImage
 0000036C  8B 0D 0105FA1D R		mov	ecx,imageResolution
 00000372  E8 00000000 E		call	WriteToFile
 00000377  A3 0188E606 R		mov	bytesWrittenOut,eax		; save return value
 0000037C  E8 00000000 E		call	CloseFile
					
					COMMENT @
				; Display the return value.
					mov	edx,OFFSET str2Out		; "Bytes written"
					call	WriteString
					mov	eax,bytesWrittenOut
					call	WriteDec
					call	Crlf
					@

					; Do the same process for oversharpening
 00000381  80 3D 0105FA4F R		cmp newImage, 1
	   01
 00000388  0F 84 000000DE		je quit
 0000038E  FE 05 0105FA4F R		inc newImage
					; Change settings for oversharpening
 00000394  C6 05 0188E5F0 R		mov	fileNameOut, "o"
	   6F
 0000039B  C6 05 0188E5F1 R		mov fileNameOut[1], "v"
	   76
 000003A2  C6 05 0188E5F2 R		mov fileNameOut[2], "e"
	   65
 000003A9  C6 05 0188E5F3 R		mov fileNameOut[3], "r"
	   72
 000003B0  C6 05 0105FA29 R		mov sharpeningKernel[0], 0
	   00
 000003B7  C6 05 0105FA2A R		mov sharpeningKernel[1], -2
	   FE
 000003BE  C6 05 0105FA2B R		mov sharpeningKernel[2], 0
	   00
 000003C5  C6 05 0105FA2C R		mov sharpeningKernel[3], -2
	   FE
 000003CC  C6 05 0105FA2D R		mov sharpeningKernel[4], 9
	   09
 000003D3  C6 05 0105FA2E R		mov sharpeningKernel[5], -2
	   FE
 000003DA  C6 05 0105FA2F R		mov sharpeningKernel[6], 0
	   00
 000003E1  C6 05 0105FA30 R		mov sharpeningKernel[7], -2
	   FE
 000003E8  C6 05 0105FA31 R		mov sharpeningKernel[8], 0
	   00
					; Reset all convolution values
 000003EF  33 C0			xor eax, eax
 000003F1  33 DB			xor ebx, ebx
 000003F3  33 C9			xor ecx, ecx
 000003F5  33 D2			xor edx, edx
 000003F7  33 FF			xor edi, edi
 000003F9  33 F6			xor esi, esi
 000003FB  66| C7 05			mov sum, 0
	   0105FA32 R
	   0000
 00000404  66| C7 05			mov imageRowCounter, 0
	   0105FA34 R
	   0000
 0000040D  66| C7 05			mov imageColumnCounter, 0
	   0105FA36 R
	   0000
 00000416  C6 05 0105FA38 R		mov kernelRowCounter, 0
	   00
 0000041D  C6 05 0105FA39 R		mov kernelColumnCounter, 0
	   00
 00000424  C6 05 0105FA3A R		mov kernelCounter, 0
	   00
 0000042B  C7 05 0105FA3B R		mov kernelRowOffset, 0
	   00000000
 00000435  C7 05 0105FA3F R		mov kernelColumnOffset, 0
	   00000000
 0000043F  C7 05 0105FA43 R		mov imageRowOffset, 0
	   00000000
 00000449  C7 05 0105FA47 R		mov imageColumnOffset, 0
	   00000000
 00000453  C7 05 0105FA4B R		mov sharpenedImageCounter, 0
	   00000000
 0000045D  C7 05 0188E606 R		mov bytesWrittenOut, 0
	   00000000
 00000467  E9 FFFFFD7F			jmp new_kernel_row

 0000046C			quit:
					exit
 0000046C  6A 00	   *	    push   +000000000h
 0000046E  E8 00000000 E   *	    call   ExitProcess
 00000473			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.25.28614.0	    05/25/20 01:27:03
CreateFile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0188E69E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000473 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000473 Public STDCALL
  getImageWidth  . . . . . . . .	L Near	 0000003B _TEXT	
  updateWidthValue . . . . . . .	L Near	 00000051 _TEXT	
  endWidth . . . . . . . . . . .	L Near	 00000058 _TEXT	
  getImageHeight . . . . . . . .	L Near	 00000063 _TEXT	
  updateHeightValue  . . . . . .	L Near	 00000079 _TEXT	
  endHeight  . . . . . . . . . .	L Near	 00000080 _TEXT	
  file_ok_in . . . . . . . . . .	L Near	 00000102 _TEXT	
  check_buffer_size  . . . . . .	L Near	 00000126 _TEXT	
  buf_size_ok  . . . . . . . . .	L Near	 0000013E _TEXT	
  close_file . . . . . . . . . .	L Near	 00000176 _TEXT	
  convolution  . . . . . . . . .	L Near	 000001AC _TEXT	
  new_kernel_row . . . . . . . .	L Near	 000001EB _TEXT	
  new_kernel_column  . . . . . .	L Near	 00000240 _TEXT	
  new_image_row  . . . . . . . .	L Near	 00000273 _TEXT	
  less_than_zero . . . . . . . .	L Near	 00000293 _TEXT	
  over_255 . . . . . . . . . . .	L Near	 0000029C _TEXT	
  sum_stored . . . . . . . . . .	L Near	 000002A3 _TEXT	
  new_image_column . . . . . . .	L Near	 00000303 _TEXT	
  sharpened  . . . . . . . . . .	L Near	 0000033F _TEXT	
  file_out_ok  . . . . . . . . .	L Near	 00000362 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000046C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0188E637 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0188E64A _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0188E65F _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0188E686 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0188E692 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_CONSOLE . . . . . . . . .	Number	 0000000Ah   
BUFFER_SIZE_IN . . . . . . . . .	Number	 0105F9A1h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
askForDimensions . . . . . . . .	Byte	 00000014 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferConsole  . . . . . . . . .	Byte	 00000000 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000010 _DATA	
bytesWrittenOut  . . . . . . . .	DWord	 0188E606 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extendedImageMaxSize . . . . . .	Number	 0105F9A0h   
extendedImageSize  . . . . . . .	DWord	 0105FA21 _DATA	
fileHandleIn . . . . . . . . . .	DWord	 0105FA11 _DATA	
fileHandleOut  . . . . . . . . .	DWord	 0188E602 _DATA	
fileNameIn . . . . . . . . . . .	Byte	 0105FA07 _DATA	
fileNameOut  . . . . . . . . . .	Byte	 0188E5F0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
imageArray . . . . . . . . . . .	Byte	 00000066 _DATA	
imageColumnCounter . . . . . . .	Word	 0105FA36 _DATA	
imageColumnOffset  . . . . . . .	DWord	 0105FA47 _DATA	
imageHeightExtended  . . . . . .	Word	 0105FA1B _DATA	
imageHeight  . . . . . . . . . .	Word	 0105FA19 _DATA	
imageMaxHeight . . . . . . . . .	Number	 00000898h   
imageMaxResolution . . . . . . .	Number	 0082EBA0h   
imageMaxWidth  . . . . . . . . .	Number	 00000F3Ch   
imageResolution  . . . . . . . .	DWord	 0105FA1D _DATA	
imageRowCounter  . . . . . . . .	Word	 0105FA34 _DATA	
imageRowOffset . . . . . . . . .	DWord	 0105FA43 _DATA	
imageWidthExtended . . . . . . .	Word	 0105FA17 _DATA	
imageWidth . . . . . . . . . . .	Word	 0105FA15 _DATA	
kernelColumnCounter  . . . . . .	Byte	 0105FA39 _DATA	
kernelColumnOffset . . . . . . .	DWord	 0105FA3F _DATA	
kernelCounter  . . . . . . . . .	Byte	 0105FA3A _DATA	
kernelRowCounter . . . . . . . .	Byte	 0105FA38 _DATA	
kernelRowOffset  . . . . . . . .	DWord	 0105FA3B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
newImage . . . . . . . . . . . .	Byte	 0105FA4F _DATA	
pixelsIn . . . . . . . . . . . .	DWord	 0105FA25 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sharpenedImageCounter  . . . . .	DWord	 0105FA4B _DATA	
sharpenedImage . . . . . . . . .	Byte	 0105FA50 _DATA	
sharpeningKernel . . . . . . . .	Byte	 0105FA29 _DATA	
stdInHandle  . . . . . . . . . .	DWord	 0000000C _DATA	
str1Out  . . . . . . . . . . . .	Byte	 0188E60A _DATA	
str2Out  . . . . . . . . . . . .	Byte	 0188E61F _DATA	
sum  . . . . . . . . . . . . . .	Word	 0105FA32 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
