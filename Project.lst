Microsoft (R) Macro Assembler Version 14.25.28614.0	    05/26/20 02:04:17
CreateFile.asm						     Page 1 - 1


				; Proyecto individual 1
				; Eduardo Moya

				INCLUDE Irvine32.inc  
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				; ----------------------------- Constants --------------------------------				
 = 00000F3C			imageMaxWidth = 3900
 = 00000898			imageMaxHeight	= 2200
 = 0082EBA0			imageMaxResolution	= imageMaxWidth * imageMaxHeight					; width x height
 = 0105F9A0			extendedImageMaxSize = (imageMaxWidth + 2) * (imageMaxHeight * 2)	; (width + 2) x (height + 2)
 = 0105F9A1			BUFFER_SIZE_IN	= extendedImageMaxSize + 1
 = 0000000A			BUFFER_CONSOLE = 10

 00000000			.data
				; User console input (image size)
 00000000  0000000A [		bufferConsole				BYTE BUFFER_CONSOLE DUP(?), 0, 0
	    00
	   ] 00 00
 0000000C 00000000		stdInHandle					HANDLE ?
 00000010 00000000		bytesRead					DWORD ?
 00000014 49 6E 73 65 72	askForDimensions			BYTE "Insert image dimensions (example: 1920x1080): ",0
	   74 20 69 6D 61
	   67 65 20 64 69
	   6D 65 6E 73 69
	   6F 6E 73 20 28
	   65 78 61 6D 70
	   6C 65 3A 20 31
	   39 32 30 78 31
	   30 38 30 29 3A
	   20 00

				; File read
 00000043  0105F9A1 [		imageArray		BYTE BUFFER_SIZE_IN DUP(0)
	    00
	   ]
 0105F9E4 69 6E 70 75 74	fileNameIn		BYTE "input.txt",0
	   2E 74 78 74 00
 0105F9EE 00000000		fileHandleIn	HANDLE ?

				; Convolution
 0105F9F2 0000			imageWidth				WORD ?
 0105F9F4 0000			imageWidthExtended		WORD ?
 0105F9F6 0000			imageHeight				WORD ?
 0105F9F8 0000			imageHeightExtended		WORD ?
 0105F9FA 00000000		imageResolution			DWORD ?
 0105F9FE 00000000		extendedImageSize		DWORD ?
 0105FA02 00000000		pixelsIn				DWORD ? 
 0105FA06  00000009 [		sharpeningKernel		BYTE 9 DUP(0)
	    00
	   ]
 0105FA0F 0000			sum						WORD 0
 0105FA11 0000			imageRowCounter			WORD 0
 0105FA13 0000			imageColumnCounter		WORD 0
 0105FA15 00			kernelRowCounter		BYTE 0
 0105FA16 00			kernelColumnCounter		BYTE 0
 0105FA17 00			kernelCounter			BYTE 0
 0105FA18 00000000		kernelRowOffset			DWORD 0
 0105FA1C 00000000		kernelColumnOffset		DWORD 0
 0105FA20 00000000		imageRowOffset			DWORD 0
 0105FA24 00000000		imageColumnOffset		DWORD 0
 0105FA28 00000000		sharpenedImageCounter	DWORD 0
 0105FA2C 00			newImage				BYTE 0
 0105FA2D  0082EBA0 [		sharpenedImage			BYTE imageMaxResolution DUP(0)
	    00
	   ]

				; File Write
 0188E5CD 6E 6F 72 6D 53	fileNameOut		BYTE "normSharpened.txt", 0
	   68 61 72 70 65
	   6E 65 64 2E 74
	   78 74 00
 0188E5DF 00000000		fileHandleOut	HANDLE ?
 0188E5E3 00000000		bytesWrittenOut DWORD ?
 0188E5E7 43 61 6E 6E 6F	str1Out			BYTE "Cannot create file",0dh,0ah,0	
	   74 20 63 72 65
	   61 74 65 20 66
	   69 6C 65 0D 0A
	   00
 0188E5FC 42 79 74 65 73	str2Out			BYTE "Bytes written to file: ",0
	   20 77 72 69 74
	   74 65 6E 20 74
	   6F 20 66 69 6C
	   65 3A 20 00

 00000000			.code
 00000000			main PROC
				; ----------------------- COVER -------------------------
				mWrite <"----------------------------------------------------------",0dh,0ah>
 0188E614		     1		.data		
 0188E614 2D 2D 2D 2D 2D     1		??0000 BYTE "----------------------------------------------------------",0dh,0ah,0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 0D 0A
	   00
 00000000		     1		.code
 00000000  52		     1		push	edx
 00000001  BA 0188E614 R     1		mov	edx,OFFSET ??0000
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop	edx
				mWrite <"TECNOLOGICO DE COSTA RICA",0dh,0ah>
 0188E651		     1		.data		
 0188E651 54 45 43 4E 4F     1		??0001 BYTE "TECNOLOGICO DE COSTA RICA",0dh,0ah,0	
	   4C 4F 47 49 43
	   4F 20 44 45 20
	   43 4F 53 54 41
	   20 52 49 43 41
	   0D 0A 00
 0000000C		     1		.code
 0000000C  52		     1		push	edx
 0000000D  BA 0188E651 R     1		mov	edx,OFFSET ??0001
 00000012  E8 00000000 E     1		call	WriteString
 00000017  5A		     1		pop	edx
				mWrite <" ",0dh,0ah>
 0188E66D		     1		.data		
 0188E66D 20 0D 0A 00	     1		??0002 BYTE " ",0dh,0ah,0	
 00000018		     1		.code
 00000018  52		     1		push	edx
 00000019  BA 0188E66D R     1		mov	edx,OFFSET ??0002
 0000001E  E8 00000000 E     1		call	WriteString
 00000023  5A		     1		pop	edx
				mWrite <"COMPUTER ENGINEERING ACADEMIC AREA",0dh,0ah>
 0188E671		     1		.data		
 0188E671 43 4F 4D 50 55     1		??0003 BYTE "COMPUTER ENGINEERING ACADEMIC AREA",0dh,0ah,0	
	   54 45 52 20 45
	   4E 47 49 4E 45
	   45 52 49 4E 47
	   20 41 43 41 44
	   45 4D 49 43 20
	   41 52 45 41 0D
	   0A 00
 00000024		     1		.code
 00000024  52		     1		push	edx
 00000025  BA 0188E671 R     1		mov	edx,OFFSET ??0003
 0000002A  E8 00000000 E     1		call	WriteString
 0000002F  5A		     1		pop	edx
				mWrite <"Computer Architecture I",0dh,0ah>
 0188E696		     1		.data		
 0188E696 43 6F 6D 70 75     1		??0004 BYTE "Computer Architecture I",0dh,0ah,0	
	   74 65 72 20 41
	   72 63 68 69 74
	   65 63 74 75 72
	   65 20 49 0D 0A
	   00
 00000030		     1		.code
 00000030  52		     1		push	edx
 00000031  BA 0188E696 R     1		mov	edx,OFFSET ??0004
 00000036  E8 00000000 E     1		call	WriteString
 0000003B  5A		     1		pop	edx
				mWrite <" ",0dh,0ah>
 0188E6B0		     1		.data		
 0188E6B0 20 0D 0A 00	     1		??0005 BYTE " ",0dh,0ah,0	
 0000003C		     1		.code
 0000003C  52		     1		push	edx
 0000003D  BA 0188E6B0 R     1		mov	edx,OFFSET ??0005
 00000042  E8 00000000 E     1		call	WriteString
 00000047  5A		     1		pop	edx
				mWrite <"INDIVIDUAL PROJECT #1",0dh,0ah>
 0188E6B4		     1		.data		
 0188E6B4 49 4E 44 49 56     1		??0006 BYTE "INDIVIDUAL PROJECT #1",0dh,0ah,0	
	   49 44 55 41 4C
	   20 50 52 4F 4A
	   45 43 54 20 23
	   31 0D 0A 00
 00000048		     1		.code
 00000048  52		     1		push	edx
 00000049  BA 0188E6B4 R     1		mov	edx,OFFSET ??0006
 0000004E  E8 00000000 E     1		call	WriteString
 00000053  5A		     1		pop	edx
				mWrite <"Image convolution in assembly",0dh,0ah>
 0188E6CC		     1		.data		
 0188E6CC 49 6D 61 67 65     1		??0007 BYTE "Image convolution in assembly",0dh,0ah,0	
	   20 63 6F 6E 76
	   6F 6C 75 74 69
	   6F 6E 20 69 6E
	   20 61 73 73 65
	   6D 62 6C 79 0D
	   0A 00
 00000054		     1		.code
 00000054  52		     1		push	edx
 00000055  BA 0188E6CC R     1		mov	edx,OFFSET ??0007
 0000005A  E8 00000000 E     1		call	WriteString
 0000005F  5A		     1		pop	edx
				mWrite <" ",0dh,0ah>
 0188E6EC		     1		.data		
 0188E6EC 20 0D 0A 00	     1		??0008 BYTE " ",0dh,0ah,0	
 00000060		     1		.code
 00000060  52		     1		push	edx
 00000061  BA 0188E6EC R     1		mov	edx,OFFSET ??0008
 00000066  E8 00000000 E     1		call	WriteString
 0000006B  5A		     1		pop	edx
				mWrite <"STUDENT: Eduardo Moya Bello",0dh,0ah>
 0188E6F0		     1		.data		
 0188E6F0 53 54 55 44 45     1		??0009 BYTE "STUDENT: Eduardo Moya Bello",0dh,0ah,0	
	   4E 54 3A 20 45
	   64 75 61 72 64
	   6F 20 4D 6F 79
	   61 20 42 65 6C
	   6C 6F 0D 0A 00
 0000006C		     1		.code
 0000006C  52		     1		push	edx
 0000006D  BA 0188E6F0 R     1		mov	edx,OFFSET ??0009
 00000072  E8 00000000 E     1		call	WriteString
 00000077  5A		     1		pop	edx
				mWrite <"TEACHER: Eng. Luis Chavarria Zamora",0dh,0ah>
 0188E70E		     1		.data		
 0188E70E 54 45 41 43 48     1		??000A BYTE "TEACHER: Eng. Luis Chavarria Zamora",0dh,0ah,0	
	   45 52 3A 20 45
	   6E 67 2E 20 4C
	   75 69 73 20 43
	   68 61 76 61 72
	   72 69 61 20 5A
	   61 6D 6F 72 61
	   0D 0A 00
 00000078		     1		.code
 00000078  52		     1		push	edx
 00000079  BA 0188E70E R     1		mov	edx,OFFSET ??000A
 0000007E  E8 00000000 E     1		call	WriteString
 00000083  5A		     1		pop	edx
				mWrite <" ",0dh,0ah>
 0188E734		     1		.data		
 0188E734 20 0D 0A 00	     1		??000B BYTE " ",0dh,0ah,0	
 00000084		     1		.code
 00000084  52		     1		push	edx
 00000085  BA 0188E734 R     1		mov	edx,OFFSET ??000B
 0000008A  E8 00000000 E     1		call	WriteString
 0000008F  5A		     1		pop	edx
				mWrite <"Date: 29, May 2020",0dh,0ah>
 0188E738		     1		.data		
 0188E738 44 61 74 65 3A     1		??000C BYTE "Date: 29, May 2020",0dh,0ah,0	
	   20 32 39 2C 20
	   4D 61 79 20 32
	   30 32 30 0D 0A
	   00
 00000090		     1		.code
 00000090  52		     1		push	edx
 00000091  BA 0188E738 R     1		mov	edx,OFFSET ??000C
 00000096  E8 00000000 E     1		call	WriteString
 0000009B  5A		     1		pop	edx
				mWrite <"----------------------------------------------------------",0dh,0ah>
 0188E74D		     1		.data		
 0188E74D 2D 2D 2D 2D 2D     1		??000D BYTE "----------------------------------------------------------",0dh,0ah,0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 0D 0A
	   00
 0000009C		     1		.code
 0000009C  52		     1		push	edx
 0000009D  BA 0188E74D R     1		mov	edx,OFFSET ??000D
 000000A2  E8 00000000 E     1		call	WriteString
 000000A7  5A		     1		pop	edx
				mWrite <"This program sharpens and oversharpens an image",0dh,0ah>
 0188E78A		     1		.data		
 0188E78A 54 68 69 73 20     1		??000E BYTE "This program sharpens and oversharpens an image",0dh,0ah,0	
	   70 72 6F 67 72
	   61 6D 20 73 68
	   61 72 70 65 6E
	   73 20 61 6E 64
	   20 6F 76 65 72
	   73 68 61 72 70
	   65 6E 73 20 61
	   6E 20 69 6D 61
	   67 65 0D 0A 00
 000000A8		     1		.code
 000000A8  52		     1		push	edx
 000000A9  BA 0188E78A R     1		mov	edx,OFFSET ??000E
 000000AE  E8 00000000 E     1		call	WriteString
 000000B3  5A		     1		pop	edx
				mWrite <"Maximum dimensions: 3900x2200 (width x height)",0dh,0ah>
 0188E7BC		     1		.data		
 0188E7BC 4D 61 78 69 6D     1		??000F BYTE "Maximum dimensions: 3900x2200 (width x height)",0dh,0ah,0	
	   75 6D 20 64 69
	   6D 65 6E 73 69
	   6F 6E 73 3A 20
	   33 39 30 30 78
	   32 32 30 30 20
	   28 77 69 64 74
	   68 20 78 20 68
	   65 69 67 68 74
	   29 0D 0A 00
 000000B4		     1		.code
 000000B4  52		     1		push	edx
 000000B5  BA 0188E7BC R     1		mov	edx,OFFSET ??000F
 000000BA  E8 00000000 E     1		call	WriteString
 000000BF  5A		     1		pop	edx
				mWrite <"----------------------------------------------------------",0dh,0ah>
 0188E7ED		     1		.data		
 0188E7ED 2D 2D 2D 2D 2D     1		??0010 BYTE "----------------------------------------------------------",0dh,0ah,0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 0D 0A
	   00
 000000C0		     1		.code
 000000C0  52		     1		push	edx
 000000C1  BA 0188E7ED R     1		mov	edx,OFFSET ??0010
 000000C6  E8 00000000 E     1		call	WriteString
 000000CB  5A		     1		pop	edx


				; -------------- GET IMAGE DIMENSIONS FROM CONSOLE ------
				; Ask for the input
 000000CC  BA 00000014 R	mov	edx,OFFSET askForDimensions			
 000000D1  E8 00000000 E	call	WriteString

				; Get handle to standard input
				INVOKE GetStdHandle, STD_INPUT_HANDLE
 000000D6  6A F6	   *	    push    -00000000Ah
 000000D8  E8 00000000 E   *	    call   GetStdHandle
 000000DD  A3 0000000C R	mov stdInHandle,eax

				; Wait for user input
				INVOKE ReadConsole, stdInHandle, ADDR bufferConsole,
					BUFFER_CONSOLE, ADDR bytesRead, 0
 000000E2  6A 00	   *	    push   +000000000h
 000000E4  68 00000010 R   *	    push   OFFSET bytesRead
 000000E9  6A 0A	   *	    push   +00000000Ah
 000000EB  68 00000000 R   *	    push   OFFSET bufferConsole
 000000F0  FF 35 0000000C R *	    push   stdInHandle
 000000F6  E8 00000000 E   *	    call   ReadConsoleA

				; Transform the dimensions
 000000FB  33 F6		xor esi, esi					; Position in value counter = 0
 000000FD  33 FF		xor edi, edi					; Buffer counter = 0
 000000FF  33 C0		xor eax, eax					; Dimension container
 00000101  33 DB		xor ebx, ebx					; Char value container
 00000103  66| B9 000A		mov cx, 10						; Multiplier

 00000107			getImageWidth:
 00000107  8A 9F 00000000 R	mov bl, bufferConsole[edi]		; Get actual value in buffer
 0000010D  80 FB 78		cmp bl, 120
 00000110  74 12		je endWidth
 00000112  80 EB 30		sub bl, 48						; Get number
 00000115  83 FE 00		cmp esi, 0
 00000118  74 03		je updateWidthValue
 0000011A  66| F7 E1		mul cx
 0000011D			updateWidthValue:
 0000011D  66| 03 C3		add ax, bx
 00000120  47			inc edi
 00000121  46			inc esi
 00000122  EB E3		jmp getImageWidth
 00000124			endWidth:
 00000124  66| A3		mov imageWidth, ax
	   0105F9F2 R
 0000012A  33 C0		xor eax, eax
 0000012C  33 F6		xor esi, esi
 0000012E  47			inc edi

 0000012F			getImageHeight:
 0000012F  8A 9F 00000000 R	mov bl, bufferConsole[edi]		; Get actual value in buffer
 00000135  80 FB 0D		cmp bl, 13
 00000138  74 12		je endHeight
 0000013A  80 EB 30		sub bl, 48						; Get number
 0000013D  83 FE 00		cmp esi, 0
 00000140  74 03		je updateHeightValue
 00000142  66| F7 E1		mul cx
 00000145			updateHeightValue:
 00000145  66| 03 C3		add ax, bx
 00000148  47			inc edi
 00000149  46			inc esi
 0000014A  EB E3		jmp getImageHeight
 0000014C			endHeight:
				; Get amount of pixels
 0000014C  66| A3		mov imageHeight, ax
	   0105F9F6 R
 00000152  66| 8B 1D		mov bx, imageWidth
	   0105F9F2 R
 00000159  66| F7 E3		mul bx
 0000015C  66| 8B CA		mov cx, dx
 0000015F  C1 E1 10		shl ecx, 16
 00000162  66| 03 C8		add cx, ax
 00000165  89 0D 0105F9FA R	mov imageResolution, ecx
				; Get amount of pixels (extended)
 0000016B  66| A1		mov ax, imageHeight
	   0105F9F6 R
 00000171  66| 8B 1D		mov bx, imageWidth
	   0105F9F2 R
 00000178  66| 83 C0 02		add ax, 2
 0000017C  66| 83 C3 02		add bx, 2
 00000180  66| A3		mov imageHeightExtended, ax
	   0105F9F8 R
 00000186  66| 89 1D		mov imageWidthExtended, bx
	   0105F9F4 R
 0000018D  66| F7 E3		mul bx
 00000190  66| 8B CA		mov cx, dx
 00000193  C1 E1 10		shl ecx, 16
 00000196  66| 03 C8		add cx, ax
 00000199  89 0D 0105F9FE R	mov extendedImageSize, ecx

				; -------------------- READ FILE ------------------------
				; Let user input a filename.
 0000019F  BA 0105F9E4 R		mov edx,OFFSET fileNameIn
 000001A4  B9 0000000A			mov ecx,SIZEOF fileNameIn

				; Open the file for input.
 000001A9  BA 0105F9E4 R		mov edx,OFFSET fileNameIn
 000001AE  E8 00000000 E		call OpenInputFile
 000001B3  A3 0105F9EE R		mov fileHandleIn,eax

				; Check for errors.
 000001B8  83 F8 FF			cmp eax,INVALID_HANDLE_VALUE ; error opening file?
 000001BB  75 11			jne file_ok_in ; no: skip
					mWrite <"Cannot open file",0dh,0ah>
 0188E82A		     1		.data		
 0188E82A 43 61 6E 6E 6F     1		??0011 BYTE "Cannot open file",0dh,0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 000001BD		     1		.code
 000001BD  52		     1		push	edx
 000001BE  BA 0188E82A R     1		mov	edx,OFFSET ??0011
 000001C3  E8 00000000 E     1		call	WriteString
 000001C8  5A		     1		pop	edx
 000001C9  E9 0000034F			jmp quit ; and quit
					
 000001CE			file_ok_in:
				; Read the file into a buffer.
 000001CE  BA 00000043 R		mov edx,OFFSET imageArray
 000001D3  B9 0105F9A1			mov ecx,BUFFER_SIZE_IN
 000001D8  E8 00000000 E		call ReadFromFile
 000001DD  73 13			jnc check_buffer_size ; error reading?
					mWrite "Error reading file. " ; yes: show error message
 0188E83D		     1		.data		
 0188E83D 45 72 72 6F 72     1		??0012 BYTE "Error reading file. ",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 20
	   00
 000001DF		     1		.code
 000001DF  52		     1		push	edx
 000001E0  BA 0188E83D R     1		mov	edx,OFFSET ??0012
 000001E5  E8 00000000 E     1		call	WriteString
 000001EA  5A		     1		pop	edx
 000001EB  E8 00000000 E		call WriteWindowsMsg
 000001F0  EB 35			jmp close_file

 000001F2			check_buffer_size:
 000001F2  3D 0105F9A1			cmp eax,BUFFER_SIZE_IN; buffer large enough?
 000001F7  72 11			jb buf_size_ok ; yes
					mWrite <"Error: Buffer too small for the file",0dh,0ah>
 0188E852		     1		.data		
 0188E852 45 72 72 6F 72     1		??0013 BYTE "Error: Buffer too small for the file",0dh,0ah,0	
	   3A 20 42 75 66
	   66 65 72 20 74
	   6F 6F 20 73 6D
	   61 6C 6C 20 66
	   6F 72 20 74 68
	   65 20 66 69 6C
	   65 0D 0A 00
 000001F9		     1		.code
 000001F9  52		     1		push	edx
 000001FA  BA 0188E852 R     1		mov	edx,OFFSET ??0013
 000001FF  E8 00000000 E     1		call	WriteString
 00000204  5A		     1		pop	edx
 00000205  E9 00000313			jmp quit

 0000020A			buf_size_ok:
 0000020A  C6 80 00000043 R		mov imageArray[eax],0 ; insert null terminator
	   00
					mWrite "File size: "
 0188E879		     1		.data		
 0188E879 46 69 6C 65 20     1		??0014 BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 00000211		     1		.code
 00000211  52		     1		push	edx
 00000212  BA 0188E879 R     1		mov	edx,OFFSET ??0014
 00000217  E8 00000000 E     1		call	WriteString
 0000021C  5A		     1		pop	edx
 0000021D  E8 00000000 E		call WriteDec ; display file size
 00000222  E8 00000000 E		call Crlf

 00000227			close_file:
 00000227  A1 0105F9EE R		mov eax,fileHandleIn
 0000022C  E8 00000000 E		call CloseFile

				; ------------------- TRANSFORM BUFFER TO INT ARRAY --------
				; cl: register to hold the char and transform it to integer
				; al: register that holds multiplication results
				; dl: n as in 10^n
				; bl: actual number
 00000231  FC			cld
 00000232  66| A1		mov ax, imageWidthExtended
	   0105F9F4 R
 00000238  66| 8B 1D		mov bx, imageHeightExtended
	   0105F9F8 R
 0000023F  66| F7 E3		mul bx
 00000242  66| 8B DA		mov bx, dx
 00000245  C1 E3 10		shl ebx, 16
 00000248  66| 8B D8		mov bx, ax
 0000024B  89 1D 0105FA02 R	mov pixelsIn, ebx					; pixelIn = (width+2)x(height+2)
 00000251  33 F6		xor esi, esi						; esi: counter
 00000253  33 FF		xor edi, edi						; edi: pixel counter
 00000255  33 C0		xor eax, eax							
 00000257  33 DB		xor ebx, ebx							
 00000259  33 C9		xor ecx, ecx							
 0000025B  33 D2		xor edx, edx							

				; ----------------------- CONVOLUTION -------------------------
 0000025D			convolution:
 0000025D  C6 05 0105FA06 R		mov sharpeningKernel[0], 0
	   00
 00000264  C6 05 0105FA07 R		mov sharpeningKernel[1], -1
	   FF
 0000026B  C6 05 0105FA08 R		mov sharpeningKernel[2], 0
	   00
 00000272  C6 05 0105FA09 R		mov sharpeningKernel[3], -1
	   FF
 00000279  C6 05 0105FA0A R		mov sharpeningKernel[4], 5
	   05
 00000280  C6 05 0105FA0B R		mov sharpeningKernel[5], -1
	   FF
 00000287  C6 05 0105FA0C R		mov sharpeningKernel[6], 0
	   00
 0000028E  C6 05 0105FA0D R		mov sharpeningKernel[7], -1
	   FF
 00000295  C6 05 0105FA0E R		mov sharpeningKernel[8], 0
	   00
					
 0000029C			new_kernel_row:
 0000029C  8B 1D 0105FA18 R		mov ebx, kernelRowOffset
 000002A2  03 1D 0105FA1C R		add ebx, kernelColumnOffset
 000002A8  03 1D 0105FA20 R		add ebx, imageRowOffset
 000002AE  03 1D 0105FA24 R		add ebx, imageColumnOffset
 000002B4  8A 8B 00000043 R		mov cl, [imageArray + ebx]
 000002BA  33 D2			xor edx, edx
 000002BC  8A 15 0105FA17 R		mov dl, kernelCounter
 000002C2  8A 82 0105FA06 R		mov al, [sharpeningKernel + edx]
 000002C8  66| 98			cbw 
 000002CA  66| F7 E9			imul cx
 000002CD  66| 01 05			add sum, ax
	   0105FA0F R
 000002D4  FE 05 0105FA17 R		inc kernelCounter
 000002DA  FE 05 0105FA15 R		inc kernelRowCounter
 000002E0  80 3D 0105FA15 R		cmp kernelRowCounter, 3
	   03
 000002E7  74 08			je new_kernel_column
 000002E9  FF 05 0105FA18 R		inc kernelRowOffset
 000002EF  EB AB			jmp new_kernel_row

 000002F1			new_kernel_column:
 000002F1  FE 05 0105FA16 R		inc kernelColumnCounter
 000002F7  80 3D 0105FA16 R		cmp kernelColumnCounter, 3
	   03
 000002FE  74 24			je new_image_row
 00000300  C7 05 0105FA18 R		mov kernelRowOffset, 0
	   00000000
 0000030A  C6 05 0105FA15 R		mov kernelRowCounter, 0
	   00
 00000311  33 C0			xor eax, eax
 00000313  66| A1			mov ax, imageWidthExtended
	   0105F9F4 R
 00000319  01 05 0105FA1C R		add kernelColumnOffset, eax
 0000031F  E9 FFFFFF78			jmp new_kernel_row

 00000324			new_image_row:
 00000324  66| A1			mov ax, sum
	   0105FA0F R
 0000032A  8B 1D 0105FA28 R		mov ebx, sharpenedImageCounter
 00000330  66| 83 F8 00			cmp ax, 0
 00000334  7C 0E			jl less_than_zero
 00000336  66| 3D 00FF			cmp ax, 255
 0000033A  7F 11			jg over_255
 0000033C  88 83 0105FA2D R		mov sharpenedImage[ebx], al
 00000342  EB 10			jmp sum_stored
 00000344			less_than_zero:
 00000344  C6 83 0105FA2D R		mov sharpenedImage[ebx], 0
	   00
 0000034B  EB 07			jmp sum_stored
 0000034D			over_255:
 0000034D  C6 83 0105FA2D R		mov sharpenedImage[ebx], 255
	   FF
 00000354			sum_stored:
 00000354  33 C0			xor eax, eax
 00000356  33 DB			xor ebx, ebx
 00000358  33 C9			xor ecx, ecx
 0000035A  33 D2			xor edx, edx
 0000035C  C7 05 0105FA18 R		mov kernelRowOffset, 0
	   00000000
 00000366  C7 05 0105FA1C R		mov kernelColumnOffset, 0
	   00000000
 00000370  C6 05 0105FA15 R		mov kernelRowCounter, 0
	   00
 00000377  C6 05 0105FA16 R		mov kernelColumnCounter, 0
	   00
 0000037E  C6 05 0105FA17 R		mov kernelCounter, 0
	   00
 00000385  66| C7 05			mov sum, 0
	   0105FA0F R
	   0000
 0000038E  FF 05 0105FA20 R		inc imageRowOffset
 00000394  FF 05 0105FA28 R		inc sharpenedImageCounter
 0000039A  66| A1			mov ax, imageWidth
	   0105F9F2 R
 000003A0  66| FF 05			inc imageRowCounter
	   0105FA11 R
 000003A7  66| 39 05			cmp imageRowCounter, ax
	   0105FA11 R
 000003AE  0F 85 FFFFFEE8		jne new_kernel_row

 000003B4			new_image_column:
 000003B4  66| FF 05			inc imageColumnCounter
	   0105FA13 R
 000003BB  66| A1			mov ax, imageHeight
	   0105F9F6 R
 000003C1  66| 39 05			cmp imageColumnCounter, ax
	   0105FA13 R
 000003C8  74 26			je sharpened
 000003CA  66| C7 05			mov imageRowCounter, 0
	   0105FA11 R
	   0000
 000003D3  C7 05 0105FA20 R		mov imageRowOffset, 0
	   00000000
 000003DD  33 C0			xor eax, eax
 000003DF  66| A1			mov ax, imageWidthExtended
	   0105F9F4 R
 000003E5  01 05 0105FA24 R		add imageColumnOffset, eax
 000003EB  E9 FFFFFEAC			jmp new_kernel_row
					
 000003F0			sharpened:
				; ----------------------- WRITE FILE ------------------------
				; Create a new text file.
 000003F0  BA 0188E5CD R		mov	edx, OFFSET fileNameOut
 000003F5  E8 00000000 E		call	CreateOutputFile
 000003FA  A3 0188E5DF R		mov	fileHandleOut,eax

				; Check for errors.
 000003FF  83 F8 FF			cmp	eax, INVALID_HANDLE_VALUE	; error found?
 00000402  75 0F			jne	file_out_ok					; no: skip
 00000404  BA 0188E5E7 R		mov	edx,OFFSET str1Out			; display error
 00000409  E8 00000000 E		call	WriteString
 0000040E  E9 0000010A			jmp	quit
 00000413			file_out_ok:
				; Write the buffer to the output file.
 00000413  A1 0188E5DF R		mov	eax,fileHandleOut
 00000418  BA 0105FA2D R		mov	edx,OFFSET sharpenedImage
 0000041D  8B 0D 0105F9FA R		mov	ecx,imageResolution
 00000423  E8 00000000 E		call	WriteToFile
 00000428  A3 0188E5E3 R		mov	bytesWrittenOut,eax		; save return value
 0000042D  E8 00000000 E		call	CloseFile

					; Do the same process for oversharpening
 00000432  80 3D 0105FA2C R		cmp newImage, 1
	   01
 00000439  0F 84 000000DE		je quit
 0000043F  FE 05 0105FA2C R		inc newImage
					; Change settings for oversharpening
 00000445  C6 05 0188E5CD R		mov	fileNameOut, "o"
	   6F
 0000044C  C6 05 0188E5CE R		mov fileNameOut[1], "v"
	   76
 00000453  C6 05 0188E5CF R		mov fileNameOut[2], "e"
	   65
 0000045A  C6 05 0188E5D0 R		mov fileNameOut[3], "r"
	   72
 00000461  C6 05 0105FA06 R		mov sharpeningKernel[0], 0
	   00
 00000468  C6 05 0105FA07 R		mov sharpeningKernel[1], -2
	   FE
 0000046F  C6 05 0105FA08 R		mov sharpeningKernel[2], 0
	   00
 00000476  C6 05 0105FA09 R		mov sharpeningKernel[3], -2
	   FE
 0000047D  C6 05 0105FA0A R		mov sharpeningKernel[4], 9
	   09
 00000484  C6 05 0105FA0B R		mov sharpeningKernel[5], -2
	   FE
 0000048B  C6 05 0105FA0C R		mov sharpeningKernel[6], 0
	   00
 00000492  C6 05 0105FA0D R		mov sharpeningKernel[7], -2
	   FE
 00000499  C6 05 0105FA0E R		mov sharpeningKernel[8], 0
	   00
					; Reset all convolution values
 000004A0  33 C0			xor eax, eax
 000004A2  33 DB			xor ebx, ebx
 000004A4  33 C9			xor ecx, ecx
 000004A6  33 D2			xor edx, edx
 000004A8  33 FF			xor edi, edi
 000004AA  33 F6			xor esi, esi
 000004AC  66| C7 05			mov sum, 0
	   0105FA0F R
	   0000
 000004B5  66| C7 05			mov imageRowCounter, 0
	   0105FA11 R
	   0000
 000004BE  66| C7 05			mov imageColumnCounter, 0
	   0105FA13 R
	   0000
 000004C7  C6 05 0105FA15 R		mov kernelRowCounter, 0
	   00
 000004CE  C6 05 0105FA16 R		mov kernelColumnCounter, 0
	   00
 000004D5  C6 05 0105FA17 R		mov kernelCounter, 0
	   00
 000004DC  C7 05 0105FA18 R		mov kernelRowOffset, 0
	   00000000
 000004E6  C7 05 0105FA1C R		mov kernelColumnOffset, 0
	   00000000
 000004F0  C7 05 0105FA20 R		mov imageRowOffset, 0
	   00000000
 000004FA  C7 05 0105FA24 R		mov imageColumnOffset, 0
	   00000000
 00000504  C7 05 0105FA28 R		mov sharpenedImageCounter, 0
	   00000000
 0000050E  C7 05 0188E5E3 R		mov bytesWrittenOut, 0
	   00000000
 00000518  E9 FFFFFD7F			jmp new_kernel_row

 0000051D			quit:
					mWrite <"Sharpening and oversharpening successful!",0dh,0ah>
 0188E885		     1		.data		
 0188E885 53 68 61 72 70     1		??0015 BYTE "Sharpening and oversharpening successful!",0dh,0ah,0	
	   65 6E 69 6E 67
	   20 61 6E 64 20
	   6F 76 65 72 73
	   68 61 72 70 65
	   6E 69 6E 67 20
	   73 75 63 63 65
	   73 73 66 75 6C
	   21 0D 0A 00
 0000051D		     1		.code
 0000051D  52		     1		push	edx
 0000051E  BA 0188E885 R     1		mov	edx,OFFSET ??0015
 00000523  E8 00000000 E     1		call	WriteString
 00000528  5A		     1		pop	edx
					mWrite <"----------------------------------------------------------",0dh,0ah>
 0188E8B1		     1		.data		
 0188E8B1 2D 2D 2D 2D 2D     1		??0016 BYTE "----------------------------------------------------------",0dh,0ah,0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 0D 0A
	   00
 00000529		     1		.code
 00000529  52		     1		push	edx
 0000052A  BA 0188E8B1 R     1		mov	edx,OFFSET ??0016
 0000052F  E8 00000000 E     1		call	WriteString
 00000534  5A		     1		pop	edx
					exit
 00000535  6A 00	   *	    push   +000000000h
 00000537  E8 00000000 E   *	    call   ExitProcess
 0000053C			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.25.28614.0	    05/26/20 02:04:17
CreateFile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0188E8EE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000053C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000053C Public STDCALL
  getImageWidth  . . . . . . . .	L Near	 00000107 _TEXT	
  updateWidthValue . . . . . . .	L Near	 0000011D _TEXT	
  endWidth . . . . . . . . . . .	L Near	 00000124 _TEXT	
  getImageHeight . . . . . . . .	L Near	 0000012F _TEXT	
  updateHeightValue  . . . . . .	L Near	 00000145 _TEXT	
  endHeight  . . . . . . . . . .	L Near	 0000014C _TEXT	
  file_ok_in . . . . . . . . . .	L Near	 000001CE _TEXT	
  check_buffer_size  . . . . . .	L Near	 000001F2 _TEXT	
  buf_size_ok  . . . . . . . . .	L Near	 0000020A _TEXT	
  close_file . . . . . . . . . .	L Near	 00000227 _TEXT	
  convolution  . . . . . . . . .	L Near	 0000025D _TEXT	
  new_kernel_row . . . . . . . .	L Near	 0000029C _TEXT	
  new_kernel_column  . . . . . .	L Near	 000002F1 _TEXT	
  new_image_row  . . . . . . . .	L Near	 00000324 _TEXT	
  less_than_zero . . . . . . . .	L Near	 00000344 _TEXT	
  over_255 . . . . . . . . . . .	L Near	 0000034D _TEXT	
  sum_stored . . . . . . . . . .	L Near	 00000354 _TEXT	
  new_image_column . . . . . . .	L Near	 000003B4 _TEXT	
  sharpened  . . . . . . . . . .	L Near	 000003F0 _TEXT	
  file_out_ok  . . . . . . . . .	L Near	 00000413 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000051D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0188E614 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0188E651 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0188E66D _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0188E671 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0188E696 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0188E6B0 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0188E6B4 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0188E6CC _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0188E6EC _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0188E6F0 _DATA	
??000A . . . . . . . . . . . . .	Byte	 0188E70E _DATA	
??000B . . . . . . . . . . . . .	Byte	 0188E734 _DATA	
??000C . . . . . . . . . . . . .	Byte	 0188E738 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0188E74D _DATA	
??000E . . . . . . . . . . . . .	Byte	 0188E78A _DATA	
??000F . . . . . . . . . . . . .	Byte	 0188E7BC _DATA	
??0010 . . . . . . . . . . . . .	Byte	 0188E7ED _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0188E82A _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0188E83D _DATA	
??0013 . . . . . . . . . . . . .	Byte	 0188E852 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 0188E879 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 0188E885 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 0188E8B1 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_CONSOLE . . . . . . . . .	Number	 0000000Ah   
BUFFER_SIZE_IN . . . . . . . . .	Number	 0105F9A1h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
askForDimensions . . . . . . . .	Byte	 00000014 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferConsole  . . . . . . . . .	Byte	 00000000 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000010 _DATA	
bytesWrittenOut  . . . . . . . .	DWord	 0188E5E3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extendedImageMaxSize . . . . . .	Number	 0105F9A0h   
extendedImageSize  . . . . . . .	DWord	 0105F9FE _DATA	
fileHandleIn . . . . . . . . . .	DWord	 0105F9EE _DATA	
fileHandleOut  . . . . . . . . .	DWord	 0188E5DF _DATA	
fileNameIn . . . . . . . . . . .	Byte	 0105F9E4 _DATA	
fileNameOut  . . . . . . . . . .	Byte	 0188E5CD _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
imageArray . . . . . . . . . . .	Byte	 00000043 _DATA	
imageColumnCounter . . . . . . .	Word	 0105FA13 _DATA	
imageColumnOffset  . . . . . . .	DWord	 0105FA24 _DATA	
imageHeightExtended  . . . . . .	Word	 0105F9F8 _DATA	
imageHeight  . . . . . . . . . .	Word	 0105F9F6 _DATA	
imageMaxHeight . . . . . . . . .	Number	 00000898h   
imageMaxResolution . . . . . . .	Number	 0082EBA0h   
imageMaxWidth  . . . . . . . . .	Number	 00000F3Ch   
imageResolution  . . . . . . . .	DWord	 0105F9FA _DATA	
imageRowCounter  . . . . . . . .	Word	 0105FA11 _DATA	
imageRowOffset . . . . . . . . .	DWord	 0105FA20 _DATA	
imageWidthExtended . . . . . . .	Word	 0105F9F4 _DATA	
imageWidth . . . . . . . . . . .	Word	 0105F9F2 _DATA	
kernelColumnCounter  . . . . . .	Byte	 0105FA16 _DATA	
kernelColumnOffset . . . . . . .	DWord	 0105FA1C _DATA	
kernelCounter  . . . . . . . . .	Byte	 0105FA17 _DATA	
kernelRowCounter . . . . . . . .	Byte	 0105FA15 _DATA	
kernelRowOffset  . . . . . . . .	DWord	 0105FA18 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
newImage . . . . . . . . . . . .	Byte	 0105FA2C _DATA	
pixelsIn . . . . . . . . . . . .	DWord	 0105FA02 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sharpenedImageCounter  . . . . .	DWord	 0105FA28 _DATA	
sharpenedImage . . . . . . . . .	Byte	 0105FA2D _DATA	
sharpeningKernel . . . . . . . .	Byte	 0105FA06 _DATA	
stdInHandle  . . . . . . . . . .	DWord	 0000000C _DATA	
str1Out  . . . . . . . . . . . .	Byte	 0188E5E7 _DATA	
str2Out  . . . . . . . . . . . .	Byte	 0188E5FC _DATA	
sum  . . . . . . . . . . . . . .	Word	 0105FA0F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
